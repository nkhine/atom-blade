'fileTypes': [
  'blade'
]
'name': 'Blade'
'patterns': [
  {
    'comment': 'Doctype declaration.'
    'match': '^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?'
    'name': 'comment.other.doctype.blade'
  }
  {
    'begin': '^(\\s*)//-'
    'comment': 'Unbuffered (jade-only) comments.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'comment.unbuffered.block.blade'
  }
  {
    'begin': '^(\\s*)//'
    'comment': 'Buffered (html) comments.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'string.comment.buffered.block.blade'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'invalid.illegal.comment.comment.block.blade'
        'comment': 'Buffered comments inside buffered comments will generate invalid html.'
        'match': '^\\s*(//)(?!-)'
        'name': 'string.comment.buffered.block.blade'
      }
    ]
  }
  {
    'begin': '^(\\s*)(script)(?=[.#(\\s])((?![^\\n]*type=)|(?=[^\\n]*text/javascript))'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.script.blade'
    'comment': 'Script tag with JavaScript code.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.script.blade'
    'patterns': [
      {
        'begin': '\\G(?=\\()'
        'end': '$'
        'name': 'stuff.tag.script.blade'
        'patterns': [
          {
            'include': '#tag_attributes'
          }
        ]
      }
      {
        'begin': '\\G(?=[.#])'
        'end': '$'
        'name': 'stuff.tag.script.blade'
        'patterns': [
          {
            'include': '#complete_tag'
          }
        ]
      }
      {
        'include': 'source.js'
      }
    ]
  }
  {
    'begin': '^(\\s*)(style)(?=[.#(\\s])'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.script.blade'
    'comment': 'Style tag with CSS code.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.style.blade'
    'patterns': [
      {
        'begin': '\\G(?=\\()'
        'end': '$'
        'name': 'stuff.tag.style.blade'
        'patterns': [
          {
            'include': '#tag_attributes'
          }
        ]
      }
      {
        'begin': '\\G(?=[.#])'
        'end': '$'
        'name': 'stuff.tag.style.blade'
        'patterns': [
          {
            'include': '#complete_tag'
          }
        ]
      }
      {
        'include': 'source.css'
      }
    ]
  }
  {
    'begin': '^(\\s*):(markdown)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.markdown.filter.blade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.markdown.filter.blade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'text.html.markdown'
      }
    ]
  }
  {
    'begin': '^(\\s*):(sass)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.sass.filter.blade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.sass.filter.blade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.sass'
      }
    ]
  }
  {
    'begin': '^(\\s*):(less)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.less.filter.blade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.less.filter.blade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.less'
      }
    ]
  }
  {
    'begin': '^(\\s*):(stylus)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.stylus.filter.blade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.stylus.filter.blade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.stylus'
      }
    ]
  }
  {
    'begin': '^(\\s*):(coffee(-?script)?)(?=\\(|$)'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.coffeescript.filter.blade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.coffeescript.filter.blade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.coffee'
      }
    ]
  }
  {
    'begin': '^(\\s*)((:(?=.))|(:$))'
    'beginCaptures':
      '4':
        'name': 'invalid.illegal.empty.generic.filter.blade'
    'comment': 'Generic Jade filter.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.generic.filter.blade'
    'patterns': [
      {
        'begin': '\\G(?<=:)(?=.)'
        'end': '$'
        'name': 'name.generic.filter.blade'
        'patterns': [
          {
            'match': '\\G\\('
            'name': 'invalid.illegal.name.generic.filter.blade'
          }
          {
            'match': '\\w'
            'name': 'constant.language.name.generic.filter.blade'
          }
          {
            'include': '#filter_args'
          }
          {
            'match': '\\W'
            'name': 'invalid.illegal.name.generic.filter.blade'
          }
        ]
      }
    ]
  }
  {
    'begin': '^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\\'\\"]*(?:(?:\\\'(?:[^\\\']|(?:(?<!\\\\)\\\\\\\'))*\\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\\'\\"]*(?:(?:\\\'(?:[^\\\']|(?:(?<!\\\\)\\\\\\\'))*\\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))'
    'beginCaptures':
      '2':
        'name': 'constant.id.tag.blade'
      '3':
        'name': 'constant.language.js'
      '4':
        'name': 'entity.name.tag.blade'
    'comment': 'Generated from dot_block_tag.py'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.block.dot.tag.blade'
    'patterns': [
      {
        'include': '#tag_attributes'
      }
      {
        'include': '#complete_tag'
      }
      {
        'begin': '^(?=.)'
        'end': '$'
        'name': 'text.block.blade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*+(?=[^/])'
    'comment': 'All constructs that generally span a single line starting with any number of white-spaces.'
    'end': '$'
    'name': 'tag.blade'
    'patterns': [
      {
        'include': '#inline_jade'
      }
      {
        'include': '#blocks_and_includes'
      }
      {
        'include': '#unbuffered_code'
      }
      {
        'include': '#mixins'
      }
      {
        'include': '#flow_control'
      }
      {
        'include': '#case_conds'
      }
      {
        'begin': '\\|'
        'comment': 'Tag pipe text line.'
        'end': '$'
        'name': 'text.block.pipe.blade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
      {
        'include': '#printed_expression'
      }
      {
        'begin': '\\G((?=<)|[^\\w.#]|(\\.[^\\w-]))|(#[^\\{\\w-])'
        'comment': 'Line starting with characters incompatible with tag name/id/class is standalone text.'
        'end': '$'
        'name': 'text.blade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
      {
        'include': '#complete_tag'
      }
    ]
  }
]
'repository':
  'blocks_and_includes':
    'captures':
      '1':
        'name': 'storage.type.import.include.blade'
      '4':
        'name': 'variable.control.import.include.blade'
    'comment': 'Template blocks and includes.'
    'match': '(extends|include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$'
    'name': 'meta.first-class.blade'
  'brackets_js':
    'begin': '\\['
    'end': '\\]'
    'name': 'js.value.attribute.tag.blade'
    'patterns': [
      {
        'include': '#brackets_js'
      }
      {
        'include': 'source.js'
      }
    ]
  'case_conds':
    'begin': '(default|when)((\\s+|(?=:))|$)'
    'captures':
      '1':
        'name': 'storage.type.function.blade'
    'comment': 'Jade case conditionals.'
    'end': '$'
    'name': 'meta.control.flow.blade'
    'patterns': [
      {
        'begin': '\\G(?!:)'
        'end': '(?=:\\s+)|$'
        'name': 'js.embedded.control.flow.blade'
        'patterns': [
          {
            'include': '#case_when_paren'
          }
          {
            'include': 'source.js'
          }
        ]
      }
      {
        'begin': ':\\s+'
        'end': '$'
        'name': 'tag.case.control.flow.blade'
        'patterns': [
          {
            'include': '#complete_tag'
          }
        ]
      }
    ]
  'case_when_paren':
    'begin': '\\('
    'end': '\\)'
    'name': 'js.when.control.flow.blade'
    'patterns': [
      {
        'include': '#case_when_paren'
      }
      {
        'match': ':'
        'name': 'invalid.illegal.name.tag.blade'
      }
      {
        'include': 'source.js'
      }
    ]
  'complete_tag':
    'begin': '(?=[\\w.#])|(:\\s*)'
    'end': '(\\.?$)|(?=:.)'
    'name': 'complete_tag.blade'
    'patterns': [
      {
        'include': '#blocks_and_includes'
      }
      {
        'include': '#unbuffered_code'
      }
      {
        'include': '#mixins'
      }
      {
        'include': '#flow_control'
      }
      {
        'match': '(?<=:)\\w.*$'
        'name': 'invalid.illegal.name.tag.blade'
      }
      {
        'include': '#tag_name'
      }
      {
        'include': '#tag_id'
      }
      {
        'include': '#tag_classes'
      }
      {
        'include': '#tag_attributes'
      }
      {
        'include': '#tag_mixin_attributes'
      }
      {
        'captures':
          '2':
            'name': 'invalid.illegal.end.tag.blade'
          '4':
            'name': 'invalid.illegal.end.tag.blade'
        'match': '((\\.)\\s+$)|((:)\\s*$)'
      }
      {
        'include': '#printed_expression'
      }
      {
        'include': '#tag_text'
      }
    ]
  'embedded_html':
    'begin': '(?=<[^>]*>)'
    'end': '$|(?=>)'
    'name': 'html'
    'patterns': [
      {
        'include': 'text.html.basic'
      }
      {
        'include': '#interpolated_value'
      }
      {
        'include': '#interpolated_error'
      }
    ]
  'filter_args':
    'begin': '\\G(\\()'
    'captures':
      '1':
        'name': 'meta.args.filter.blade'
      '2':
        'name': 'invalid.illegal.extra.args.filter.blade'
    'end': '(\\))(.*?$)'
    'name': 'args.filter.blade'
    'patterns': [
      {
        'begin': '([^\\s(),=]+)(=?)'
        'beginCaptures':
          '1':
            'name': 'entity.other.attribute-name.tag.blade'
          '2':
            'name': 'punctuation.separator.key-value.blade'
        'contentName': 'string.value.args.filter.blade'
        'end': '((?=\\))|,|$)'
        'name': 'attributes.tag.blade'
        'patterns': [
          {
            'include': '#filter_args_paren'
          }
        ]
      }
    ]
  'filter_args_paren':
    'begin': '\\('
    'end': '\\)|$'
    'patterns': [
      {
        'include': '#filter_args_paren'
      }
    ]
  'flow_control':
    'patterns': [
      {
        'begin': '(for|if|else if|each|until|while|unless|case)(\\s+|$)'
        'captures':
          '1':
            'name': 'storage.type.function.blade'
        'comment': 'Jade control flow.'
        'end': '$'
        'name': 'meta.control.flow.blade'
        'patterns': [
          {
            'begin': ''
            'end': '$'
            'name': 'js.embedded.control.flow.blade'
            'patterns': [
              {
                'include': 'source.js'
              }
            ]
          }
        ]
      }
      {
        'match': '(else)(?! if)\\s*([^\\s].*)?$'
        'captures':
          '1':
            'name': 'storage.type.function.blade'
          '2':
            'name': 'invalid.illegal.html_entity.text.blade'
        'comment': 'Jade control flow.'
        'name': 'meta.control.flow.blade'
      }
    ]
  'html_entity':
    'patterns': [
      {
        'match': '(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
        'name': 'constant.character.entity.html.text.blade'
      }
      {
        'match': '[<>&]'
        'name': 'invalid.illegal.html_entity.text.blade'
      }
    ]
  'inline_jade':
    'begin': '(?<!\\\\)(#\\[)'
    'captures':
      '1':
        'name': 'entity.name.function.blade'
      '2':
        'name': 'entity.name.function.blade'
    'end': '(\\])'
    'name': 'inline.blade'
    'patterns': [
      {
        'include': '#inline_jade'
      }
      {
        'include': '#mixins'
      }
      {
        'begin': '(?<!\\])(?=[\\w.#])|(:\\s*)'
        'end': '(?=\\]|(:.)|=|\\s)'
        'name': 'tag.inline.blade'
        'patterns': [
          {
            'include': '#tag_name'
          }
          {
            'include': '#tag_id'
          }
          {
            'include': '#tag_classes'
          }
          {
            'include': '#tag_attributes'
          }
          {
            'include': '#tag_mixin_attributes'
          }
          {
            'include': '#inline_jade'
          }
          {
            'match': '\\['
            'name': 'invalid.illegal.tag.blade'
          }
        ]
      }
      {
        'include': '#unbuffered_code'
      }
      {
        'include': '#printed_expression'
      }
      {
        'match': '\\['
        'name': 'invalid.illegal.tag.blade'
      }
      {
        'include': '#inline_jade_text'
      }
    ]
  'inline_jade_text':
    'begin': ''
    'end': '(?=\\])'
    'name': 'text.blade'
    'patterns': [
      {
        'begin': '\\['
        'end': '\\]'
        'patterns': [
          {
            'include': '#inline_jade_text'
          }
        ]
      }
      {
        'include': '#inline_jade'
      }
      {
        'include': '#embedded_html'
      }
      {
        'include': '#html_entity'
      }
      {
        'include': '#interpolated_value'
      }
      {
        'include': '#interpolated_error'
      }
    ]
  'interpolated_error':
    'match': '(?<!\\\\)[#!]\\{(?=[^}]*$)'
    'name': 'invalid.illegal.tag.blade'
  'interpolated_value':
    'begin': '(?<!\\\\)[#!]\\{(?=.*?\\})'
    'end': '\\}'
    'name': 'string.interpolated.blade'
    'patterns': [
      {
        'match': '{'
        'name': 'invalid.illegal.tag.blade'
      }
      {
        'include': 'source.js'
      }
    ]
  'mixins':
    'begin': '(((mixin\\s+)|\\+)([\\w-]+))\\s*'
    'beginCaptures':
      '2':
        'name': 'storage.type.function.blade'
      '4':
        'name': 'entity.name.function.blade'
    'comment': 'Mixin declaration and use, including the new \'+\' syntax.'
    'end': '(?=\\])|(?=\\))|$'
    'name': 'meta.mixin.blade'
    'patterns': [
      {
        'begin': '(\\(|\\[)'
        'end': '(?=\\])|(?=\\))|$'
        'name': 'args.mixin.blade'
        'patterns': [
          {
            'include': '#tag_attribute_value_paren'
          }
          {
            'include': '#tag_attribute_value_brackets'
          }
          {
            'include': '#tag_attribute_value_braces'
          }
          {
            'include': 'source.js'
          }
        ]
      }
    ]
  'printed_expression':
    'begin': '(!?\\=)\\s*'
    'captures':
      '1':
        'name': 'constant'
    'end': '(?=\\])|$'
    'patterns': [
      {
        'include': '#brackets_js'
      }
      {
        'include': 'source.js'
      }
    ]
  'string':
    'begin': '([\'"])'
    'end': '(?<!\\\\)\\1'
    'name': 'string.quoted.blade'
    'patterns': [
      {
        'match': '\\\\((x[0-9a-fA-F]{2})|(u[0-9]{4})|.)'
        'name': 'constant.character.quoted.blade'
      }
      {
        'include': '#interpolated_value'
      }
      {
        'include': '#interpolated_error'
      }
    ]
  'tag_attribute_value_braces':
    'begin': '\\{'
    'end': '\\}'
    'name': 'js.value.attribute.tag.blade'
    'patterns': [
      {
        'include': '#tag_attribute_value_paren'
      }
      {
        'include': '#tag_attribute_value_brackets'
      }
      {
        'include': '#tag_attribute_value_braces'
      }
      {
        'include': '#string'
      }
      {
        'include': 'source.js'
      }
    ]
  'tag_attribute_value_brackets':
    'begin': '\\['
    'end': '\\]'
    'name': 'js.value.attribute.tag.blade'
    'patterns': [
      {
        'include': '#tag_attribute_value_paren'
      }
      {
        'include': '#tag_attribute_value_brackets'
      }
      {
        'include': '#tag_attribute_value_braces'
      }
      {
        'include': '#string'
      }
      {
        'include': 'source.js'
      }
    ]
  'tag_attribute_value_paren':
    'begin': '\\('
    'end': '\\)'
    'name': 'js.value.attribute.tag.blade'
    'patterns': [
      {
        'include': '#tag_attribute_value_paren'
      }
      {
        'include': '#tag_attribute_value_brackets'
      }
      {
        'include': '#tag_attribute_value_braces'
      }
      {
        'include': '#string'
      }
      {
        'include': 'source.js'
      }
    ]
  'tag_attributes':
    'begin': '(\\()'
    'captures':
      '1':
        'name': 'constant.name.attribute.tag.blade'
    'end': '(\\))'
    'name': 'attributes.tag.blade'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'entity.other.attribute-name.tag.blade'
        'match': '([^\\s(),=/]+|\\[[^\\s,=/]+]|\\([^\\s(),=/]+\\))\\s*((?=\\))|,|\\s+|$)(?!=)'
        'name': 'attributes.tag.blade'
      }
      {
        'begin': '([^\\s,=/]*[^\\s,=!/])\\s*(!?\\=)'
        'beginCaptures':
          '1':
            'name': 'entity.other.attribute-name.tag.blade'
          '2':
            'name': 'punctuation.separator.key-value.blade'
        'end': '(,|$|(?=\\)|((?<![+/*|&=:^~!?<>%-])\\s+[^+/*|&=:^~!?<>%-])))'
        'name': 'attributes.tag.blade'
        'patterns': [
          {
            'include': '#tag_attribute_value_paren'
          }
          {
            'include': '#tag_attribute_value_brackets'
          }
          {
            'include': '#tag_attribute_value_braces'
          }
          {
            'include': '#string'
          }
          {
            'include': 'source.js'
          }
        ]
      }
    ]
  'tag_classes':
    'captures':
      '1':
        'name': 'entity.other.attribute-name.class.css.blade'
    'match': '(\\.[a-zA-Z0-9_-]+)'
    'name': 'meta.selector.css.blade'
  'tag_id':
    'captures':
      '1':
        'name': 'entity.other.attribute-name.id.css.blade'
    'match': '(#[\\w-]+)'
    'name': 'meta.selector.css.blade'
  'tag_mixin_attributes':
    'begin': '(&attributes\\()'
    'captures':
      '1':
        'name': 'entity.name.function.blade'
    'end': '(\\))'
    'name': 'attributes.tag.blade'
    'patterns': [
      {
        'match': 'attributes(?=\\))'
        'name': 'storage.type.keyword.blade'
      }
      {
        'include': 'source.js'
      }
    ]
  'tag_name':
    'begin': '([#!]\\{(?=.*?\\}))|(\\w(([\\w:-]+[\\w-])|([\\w-]*)))'
    'end': '(\\G(?<!\\5[^\\w-]))|\\}|$'
    'name': 'entity.name.tag.blade'
    'patterns': [
      {
        'begin': '\\G(?<=\\{)'
        'end': '(?=\\})'
        'name': 'entity.name.tag.blade'
        'patterns': [
          {
            'match': '{'
            'name': 'invalid.illegal.tag.blade'
          }
          {
            'include': 'source.js'
          }
        ]
      }
    ]
  'tag_text':
    'begin': '(?=.)'
    'end': '$'
    'name': 'text.blade'
    'patterns': [
      {
        'include': '#inline_jade'
      }
      {
        'include': '#embedded_html'
      }
      {
        'include': '#html_entity'
      }
      {
        'include': '#interpolated_value'
      }
      {
        'include': '#interpolated_error'
      }
    ]
  'unbuffered_code':
    'begin': '(-|(([a-zA-Z0-9_]+)\\s+=))'
    'beginCaptures':
      '3':
        'name': 'variable.parameter.javascript.embedded.blade'
    'comment': 'name = function() {}'
    'end': '(?=\\])|$'
    'name': 'javascript.embedded.blade'
    'patterns': [
      {
        'include': '#brackets_js'
      }
      {
        'include': 'source.js'
      }
    ]
'scopeName': 'source.blade'
